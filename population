{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задача 1: население РФ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sbn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 57 entries, 0 to 56\n",
      "Data columns (total 2 columns):\n",
      " #   Column      Non-Null Count  Dtype\n",
      "---  ------      --------------  -----\n",
      " 0   Year        57 non-null     int64\n",
      " 1   Population  57 non-null     int64\n",
      "dtypes: int64(2)\n",
      "memory usage: 1.0 KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "      <td>119897000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "      <td>121236000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "      <td>122591000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Population\n",
       "0  1960   119897000\n",
       "1  1961   121236000\n",
       "2  1962   122591000"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "task1 = pd.read_excel('population.xlsx')\n",
    "print(task1.info())\n",
    "task1.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pd.DataFrame(task1['Year'])\n",
    "y=task1['Population']\n",
    "x.ndim\n",
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1964</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year\n",
       "0  1960\n",
       "1  1961\n",
       "2  1962\n",
       "3  1963\n",
       "4  1964"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    119897000\n",
       "1    121236000\n",
       "2    122591000\n",
       "3    123960000\n",
       "4    125345000\n",
       "Name: Population, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Построение линейной модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept: -653834031.5275261\n",
      "coef: [399091.72783251]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "reg = LinearRegression()\n",
    "reg.fit(x,y)\n",
    "print('intercept:', reg.intercept_)\n",
    "print('coef:', reg.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict=reg.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7, 7))\n",
    "plt.plot(x, y_predict, label='linear model',color='red')\n",
    "plt.scatter(x, y, label='obs')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Прогноз по первой модели:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2017]\n",
      " [2020]\n",
      " [2030]\n",
      " [2050]\n",
      " [2100]]\n",
      " прогноз:\n",
      " [151.13 152.33 156.32 164.3  184.26] млн\n"
     ]
    }
   ],
   "source": [
    "x_new = np.array([2017,2020,2030,2050,2100]).reshape((-1, 1))\n",
    "print(x_new)\n",
    "y_new = reg.predict(x_new)\n",
    "print(f' прогноз:\\n {np.round(y_new/1000000,2)} млн')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score,mean_absolute_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Качество первой модели:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE:  23051721243213.26\n",
      "MAE:  4204911.770308256\n",
      "r2:  0.6515863766434208\n"
     ]
    }
   ],
   "source": [
    "print('MSE: ', mean_squared_error(task1.Population, y_predict))\n",
    "print('MAE: ', mean_absolute_error(task1.Population, y_predict))\n",
    "print('r2: ', r2_score(task1.Population, y_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Population</td>    <th>  R-squared:         </th> <td>   0.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.645</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   102.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 02 Jan 2022</td> <th>  Prob (F-statistic):</th> <td>3.36e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>15:21:59</td>     <th>  Log-Likelihood:    </th> <td> -957.79</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    57</td>      <th>  AIC:               </th> <td>   1920.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    55</td>      <th>  BIC:               </th> <td>   1924.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-6.538e+08</td> <td> 7.82e+07</td> <td>   -8.358</td> <td> 0.000</td> <td>-8.11e+08</td> <td>-4.97e+08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year</th>      <td> 3.991e+05</td> <td> 3.94e+04</td> <td>   10.142</td> <td> 0.000</td> <td>  3.2e+05</td> <td> 4.78e+05</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>19.908</td> <th>  Durbin-Watson:     </th> <td>   0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>   3.978</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.102</td> <th>  Prob(JB):          </th> <td>   0.137</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 1.722</td> <th>  Cond. No.          </th> <td>2.40e+05</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.4e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:             Population   R-squared:                       0.652\n",
       "Model:                            OLS   Adj. R-squared:                  0.645\n",
       "Method:                 Least Squares   F-statistic:                     102.9\n",
       "Date:                Sun, 02 Jan 2022   Prob (F-statistic):           3.36e-14\n",
       "Time:                        15:21:59   Log-Likelihood:                -957.79\n",
       "No. Observations:                  57   AIC:                             1920.\n",
       "Df Residuals:                      55   BIC:                             1924.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -6.538e+08   7.82e+07     -8.358      0.000   -8.11e+08   -4.97e+08\n",
       "Year        3.991e+05   3.94e+04     10.142      0.000     3.2e+05    4.78e+05\n",
       "==============================================================================\n",
       "Omnibus:                       19.908   Durbin-Watson:                   0.016\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):                3.978\n",
       "Skew:                           0.102   Prob(JB):                        0.137\n",
       "Kurtosis:                       1.722   Cond. No.                     2.40e+05\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.4e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_stat=smf.ols(formula='Population~Year',data=task1)\n",
    "res=res_stat.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Year')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.scatter(task1.Year, res.resid)\n",
    "ax.set_title('Residual Dependence Plot')\n",
    "ax.set_ylabel('resid')\n",
    "ax.set_xlabel('Year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "resid = res.resid.copy()\n",
    "resid_std = stats.zscore(resid)\n",
    "ax.hist(resid_std, bins=25)\n",
    "ax.set_title('Histogram of residuals');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels import graphics\n",
    "graphics.gofplots.qqplot(resid, line='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "resid = res.resid.copy()\n",
    "resid_std = stats.zscore(resid)\n",
    "ax.boxplot(resid_std)\n",
    "ax.set_title('boxplot of residuals');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Построение полиномиальной модели второго порядка"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "      <th>Year_Sqr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "      <td>119897000</td>\n",
       "      <td>3841600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "      <td>121236000</td>\n",
       "      <td>3845521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "      <td>122591000</td>\n",
       "      <td>3849444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1963</td>\n",
       "      <td>123960000</td>\n",
       "      <td>3853369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1964</td>\n",
       "      <td>125345000</td>\n",
       "      <td>3857296</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Population  Year_Sqr\n",
       "0  1960   119897000   3841600\n",
       "1  1961   121236000   3845521\n",
       "2  1962   122591000   3849444\n",
       "3  1963   123960000   3853369\n",
       "4  1964   125345000   3857296"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Year_Sqr=task1['Year']**2\n",
    "task1['Year_Sqr']=Year_Sqr\n",
    "task1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept: -74228909110.55566\n",
      "coef: [ 7.44233516e+07 -1.86177716e+04]\n"
     ]
    }
   ],
   "source": [
    "reg2 = LinearRegression()\n",
    "reg2.fit(task1[['Year','Year_Sqr']],task1['Population'])\n",
    "\n",
    "print('intercept:', reg2.intercept_)\n",
    "print('coef:', reg2.coef_)\n",
    "w = reg2.coef_\n",
    "b = reg2.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "X2=np.array(task1[['Year','Year_Sqr']])\n",
    "y_predict2=reg2.predict(X2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Качество второй модели:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE:  2755573645891.9233\n",
      "MAE:  1460648.2070451702\n",
      "r2:  0.958351075468008\n"
     ]
    }
   ],
   "source": [
    "print('MSE: ', mean_squared_error(task1.Population, y_predict2))\n",
    "print('MAE: ', mean_absolute_error(task1.Population, y_predict2))\n",
    "print('r2: ', r2_score(task1.Population, y_predict2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Построение полиномиальной модели третьего порядка"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "      <th>Year_Sqr</th>\n",
       "      <th>Year_Qube</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "      <td>119897000</td>\n",
       "      <td>3841600</td>\n",
       "      <td>7529536000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "      <td>121236000</td>\n",
       "      <td>3845521</td>\n",
       "      <td>7541066681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "      <td>122591000</td>\n",
       "      <td>3849444</td>\n",
       "      <td>7552609128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1963</td>\n",
       "      <td>123960000</td>\n",
       "      <td>3853369</td>\n",
       "      <td>7564163347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1964</td>\n",
       "      <td>125345000</td>\n",
       "      <td>3857296</td>\n",
       "      <td>7575729344</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Population  Year_Sqr   Year_Qube\n",
       "0  1960   119897000   3841600  7529536000\n",
       "1  1961   121236000   3845521  7541066681\n",
       "2  1962   122591000   3849444  7552609128\n",
       "3  1963   123960000   3853369  7564163347\n",
       "4  1964   125345000   3857296  7575729344"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Year_Qube=task1['Year']**3\n",
    "task1['Year_Qube']=Year_Qube\n",
    "task1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept: 418017296355.35565\n",
      "coef: [-6.68463945e+08  3.55083341e+05 -6.26594756e+01]\n"
     ]
    }
   ],
   "source": [
    "reg3 = LinearRegression()\n",
    "reg3.fit(task1[['Year','Year_Sqr','Year_Qube']],task1['Population'])\n",
    "\n",
    "print('intercept:', reg3.intercept_)\n",
    "print('coef:', reg3.coef_)\n",
    "w = reg3.coef_\n",
    "b = reg3.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X3=np.array(task1[['Year','Year_Sqr','Year_Qube']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.19349708e+08, 1.20661118e+08, 1.21945444e+08, 1.23202308e+08,\n",
       "       1.24431336e+08, 1.25632152e+08, 1.26804379e+08, 1.27947641e+08,\n",
       "       1.29061563e+08, 1.30145768e+08, 1.31199882e+08, 1.32223526e+08,\n",
       "       1.33216327e+08, 1.34177907e+08, 1.35107891e+08, 1.36005903e+08,\n",
       "       1.36871567e+08, 1.37704507e+08, 1.38504347e+08, 1.39270711e+08,\n",
       "       1.40003223e+08, 1.40701507e+08, 1.41365187e+08, 1.41993887e+08,\n",
       "       1.42587232e+08, 1.43144845e+08, 1.43666350e+08, 1.44151372e+08,\n",
       "       1.44599534e+08, 1.45010460e+08, 1.45383775e+08, 1.45719103e+08,\n",
       "       1.46016067e+08, 1.46274291e+08, 1.46493401e+08, 1.46673019e+08,\n",
       "       1.46812770e+08, 1.46912277e+08, 1.46971166e+08, 1.46989059e+08,\n",
       "       1.46965582e+08, 1.46900357e+08, 1.46793009e+08, 1.46643163e+08,\n",
       "       1.46450441e+08, 1.46214469e+08, 1.45934870e+08, 1.45611268e+08,\n",
       "       1.45243287e+08, 1.44830552e+08, 1.44372686e+08, 1.43869313e+08,\n",
       "       1.43320058e+08, 1.42724544e+08, 1.42082396e+08, 1.41393238e+08,\n",
       "       1.40656693e+08])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict3=reg3.predict(X3)\n",
    "y_predict3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Качество третьей модели:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE:  2707689558722.306\n",
      "MAE:  1405494.6762866639\n",
      "r2:  0.9590748161438503\n"
     ]
    }
   ],
   "source": [
    "print('MSE: ', mean_squared_error(task1.Population, y_predict3))\n",
    "print('MAE: ', mean_absolute_error(task1.Population, y_predict3))\n",
    "print('r2: ', r2_score(task1.Population, y_predict3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Year_Sqr</th>\n",
       "      <th>Year_Qube</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017</td>\n",
       "      <td>4068289</td>\n",
       "      <td>8205738913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>4080400</td>\n",
       "      <td>8242408000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2030</td>\n",
       "      <td>4120900</td>\n",
       "      <td>8365427000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2050</td>\n",
       "      <td>4202500</td>\n",
       "      <td>8615125000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2080</td>\n",
       "      <td>4326400</td>\n",
       "      <td>8998912000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Year_Sqr   Year_Qube\n",
       "0  2017   4068289  8205738913\n",
       "1  2020   4080400  8242408000\n",
       "2  2030   4120900  8365427000\n",
       "3  2050   4202500  8615125000\n",
       "4  2080   4326400  8998912000"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Year = [2017,2020,2030,2050,2080]\n",
    "\n",
    "df = pd.DataFrame(Year, columns = ['Year'])\n",
    "Year_Sqr=df['Year'].values**2\n",
    "Year_Qube=df['Year'].values**3\n",
    "\n",
    "df['Year_Sqr'] = Year_Sqr\n",
    "df['Year_Qube'] = Year_Qube\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Прогноз по третьей модеи (с кубами):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " прогноз:\n",
      " [139.87 137.23 125.16  84.73 -22.25] млн\n"
     ]
    }
   ],
   "source": [
    "y_new = reg3.predict(df)\n",
    "print(f' прогноз:\\n {np.round(y_new/1000000,2)} млн')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
